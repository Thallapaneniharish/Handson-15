class GraphEdge:
    def __init__(self, u, v, weight):
        self.u = u
        self.v = v
        self.weight = weight

def bellman_ford(edges, V, start):
    # Initialize distances from start vertex to all other vertices
    distances = [float("inf")] * V
    distances[start] = 0

    # Relax all edges |V| - 1 times
    for _ in range(V - 1):
        for edge in edges:
            if distances[edge.u] + edge.weight < distances[edge.v]:
                distances[edge.v] = distances[edge.u] + edge.weight

    # Check for negative weight cycles
    for edge in edges:
        if distances[edge.u] + edge.weight < distances[edge.v]:
            print("Graph contains negative weight cycle")
            return None

    return distances

# Example usage
edges = [
    GraphEdge(0, 1, 5),
    GraphEdge(0, 2, 4),
    GraphEdge(1, 3, 3),
    GraphEdge(2, 1, 6),
    GraphEdge(3, 2, 2),
]
V = 4  # Number of vertices in the graph
start = 0  # Starting node

distances = bellman_ford(edges, V, start)
if distances:
    print("Vertex Distance from Source vertex")
    for i in range(V):
        print(f"{i}\t\t{distances[i]}")
